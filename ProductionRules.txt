//This file contains all production rules used to generate a parse tree in "SyntaxAnalyzer.cpp". All rules with left recursion have been 
  rewritten to avoid infinite loops within the parse tree generated. (See rules #25 to #28).


R1: <Rat18S> -> <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
R2: <Opt Function Definitions> -> <Function Definitions> | <Empty>
R3: <Function Definitions> -> <Function> | <Function> <Function Definitions>
R4: <Function> -> function <Identifier> [ <Opt Parameter List> ] <Opt Declaration List> <Body>
R5: <Opt Parameter List> -> <Parameter List> | <Empty>
R6: <Parameter List> -> <Parameter> | <Parameter>, <Parameter List>
R7: <Parameter> -> <IDs> : <Qualifier>
R8: <Qualifier> ->  Int | Boolean | Real
R9: <Body> -> { <Statement List> }
R10: <Opt Declaration List> -> <Declaration List> | <Empty>
R11: <Declaration List> -> <Declaration>; | <Declaration>; <Declaration List>
R12: <Declaration> -> <Qualifier> <IDs>
R13: <IDs> -> <Identifier> | <Identifier>, <IDs>
R14: <Statement List> -> <Statement> | <Statement> <Statement List>
R15: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
R16: <Compound> -> { <Statement List> }
R17: <Assign> -> <Identifier> = <Expression>
R18: <If> -> if ( <Condition> ) <Statement> endif | if ( <Condition> ) <Statement> else <Statement> endif
R19: <Return> -> return; |  return <Expression>
R20: <Print> -> put ( <Expression> );
R21: <Scan> -> get ( <IDs> );
R22: <While> -> while ( <Condition> )  <Statement>
R23: <Condition> -> <Expression>  <Relop>  <Expression>
R24: <Relop> -> ( == | ^= | > | < | >= | <= )
R25: <Expression> -> <Term> <ExpressionPrime>
R26: <ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
R27: <Term> -> <Factor> <TermPrime>
R28: <TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
R29: <Factor> -> - <Primary> | <Primary>
R30: <Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
R31: <Empty> -> Epsilon
